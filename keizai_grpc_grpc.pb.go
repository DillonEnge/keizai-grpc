// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: keizai_grpc.proto

package keizai_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeizaiGrpcClient is the client API for KeizaiGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeizaiGrpcClient interface {
	GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*PositionComponent, error)
	UpdatePosition(ctx context.Context, in *UpdatePositionRequest, opts ...grpc.CallOption) (*Empty, error)
	GetEntityIds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetEntityIdsResponse, error)
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error)
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*Empty, error)
}

type keizaiGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewKeizaiGrpcClient(cc grpc.ClientConnInterface) KeizaiGrpcClient {
	return &keizaiGrpcClient{cc}
}

func (c *keizaiGrpcClient) GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*PositionComponent, error) {
	out := new(PositionComponent)
	err := c.cc.Invoke(ctx, "/KeizaiGrpc/GetPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keizaiGrpcClient) UpdatePosition(ctx context.Context, in *UpdatePositionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/KeizaiGrpc/UpdatePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keizaiGrpcClient) GetEntityIds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetEntityIdsResponse, error) {
	out := new(GetEntityIdsResponse)
	err := c.cc.Invoke(ctx, "/KeizaiGrpc/GetEntityIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keizaiGrpcClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error) {
	out := new(CreateEntityResponse)
	err := c.cc.Invoke(ctx, "/KeizaiGrpc/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keizaiGrpcClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/KeizaiGrpc/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeizaiGrpcServer is the server API for KeizaiGrpc service.
// All implementations must embed UnimplementedKeizaiGrpcServer
// for forward compatibility
type KeizaiGrpcServer interface {
	GetPosition(context.Context, *GetPositionRequest) (*PositionComponent, error)
	UpdatePosition(context.Context, *UpdatePositionRequest) (*Empty, error)
	GetEntityIds(context.Context, *Empty) (*GetEntityIdsResponse, error)
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error)
	DeleteEntity(context.Context, *DeleteEntityRequest) (*Empty, error)
	mustEmbedUnimplementedKeizaiGrpcServer()
}

// UnimplementedKeizaiGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedKeizaiGrpcServer struct {
}

func (UnimplementedKeizaiGrpcServer) GetPosition(context.Context, *GetPositionRequest) (*PositionComponent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (UnimplementedKeizaiGrpcServer) UpdatePosition(context.Context, *UpdatePositionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosition not implemented")
}
func (UnimplementedKeizaiGrpcServer) GetEntityIds(context.Context, *Empty) (*GetEntityIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityIds not implemented")
}
func (UnimplementedKeizaiGrpcServer) CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedKeizaiGrpcServer) DeleteEntity(context.Context, *DeleteEntityRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedKeizaiGrpcServer) mustEmbedUnimplementedKeizaiGrpcServer() {}

// UnsafeKeizaiGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeizaiGrpcServer will
// result in compilation errors.
type UnsafeKeizaiGrpcServer interface {
	mustEmbedUnimplementedKeizaiGrpcServer()
}

func RegisterKeizaiGrpcServer(s grpc.ServiceRegistrar, srv KeizaiGrpcServer) {
	s.RegisterService(&KeizaiGrpc_ServiceDesc, srv)
}

func _KeizaiGrpc_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeizaiGrpcServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeizaiGrpc/GetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeizaiGrpcServer).GetPosition(ctx, req.(*GetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeizaiGrpc_UpdatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeizaiGrpcServer).UpdatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeizaiGrpc/UpdatePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeizaiGrpcServer).UpdatePosition(ctx, req.(*UpdatePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeizaiGrpc_GetEntityIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeizaiGrpcServer).GetEntityIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeizaiGrpc/GetEntityIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeizaiGrpcServer).GetEntityIds(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeizaiGrpc_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeizaiGrpcServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeizaiGrpc/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeizaiGrpcServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeizaiGrpc_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeizaiGrpcServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeizaiGrpc/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeizaiGrpcServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeizaiGrpc_ServiceDesc is the grpc.ServiceDesc for KeizaiGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeizaiGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KeizaiGrpc",
	HandlerType: (*KeizaiGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPosition",
			Handler:    _KeizaiGrpc_GetPosition_Handler,
		},
		{
			MethodName: "UpdatePosition",
			Handler:    _KeizaiGrpc_UpdatePosition_Handler,
		},
		{
			MethodName: "GetEntityIds",
			Handler:    _KeizaiGrpc_GetEntityIds_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _KeizaiGrpc_CreateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _KeizaiGrpc_DeleteEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keizai_grpc.proto",
}
